#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;         // Process ID
    int burstTime;  // Burst Time
    int priority;   // Priority
};

// Function for Preemptive Priority Scheduling
void preemptivePriorityScheduling(struct Process proc[], int n) {
    int remainingBurst[n];
    
    for (int i = 0; i < n; i++) remainingBurst[i] = proc[i].burstTime;

    int complete = 0, currentTime = 0;

    while (complete < n) {
        int minIndex = -1;
        int minPriority = __INT_MAX__;

        // Find the process with the highest priority that is not completed
        for (int i = 0; i < n; i++) {
            if (remainingBurst[i] > 0 && 
                (proc[i].priority < minPriority || 
                (proc[i].priority == minPriority && (minIndex == -1 || proc[minIndex].id > proc[i].id)))) {
                minIndex = i;
                minPriority = proc[i].priority;
            }
        }

        if (minIndex != -1) {
            remainingBurst[minIndex]--;
            currentTime++;

            if (remainingBurst[minIndex] == 0) {
                complete++;
                printf("Process %d completed at time %d\n", proc[minIndex].id, currentTime);
            }
        } else {
            currentTime++;
        }
    }
}

int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1; // Assign process ID
        printf("Enter Burst Time and Priority for Process %d: ", processes[i].id);
        scanf("%d %d", &processes[i].burstTime, &processes[i].priority);
    }

    preemptivePriorityScheduling(processes, n);

    return 0;
}

